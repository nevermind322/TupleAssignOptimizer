// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  LAPTOP-9M8I2R2U
// DateTime: 29.03.2023 22:14:41
// UserName: ???????
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;
using AssignTupleOptimizer;

namespace TupleParser
{
public enum Tokens {
    error=1,EOF=2,RPAREN=3,LPAREN=4,ASSIGN=5,COLUMN=6,
    Local=7,NonLocal=8};

public struct ValueType
{ 
			public Symbol sVal;
            public List<Symbol> tupleVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
    public List<Symbol> left;
    public List<Symbol> right;
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[8];
  private static State[] states = new State[14];
  private static string[] nonTerms = new string[] {
      "progr", "var", "tuple", "vars", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,6},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{5,4});
    states[4] = new State(new int[]{4,6},new int[]{-3,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{7,11,8,12},new int[]{-4,7,-2,13});
    states[7] = new State(new int[]{3,8,6,9});
    states[8] = new State(-3);
    states[9] = new State(new int[]{7,11,8,12},new int[]{-2,10});
    states[10] = new State(-5);
    states[11] = new State(-6);
    states[12] = new State(-7);
    states[13] = new State(-4);

    rules[1] = new Rule(-5, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,5,-3});
    rules[3] = new Rule(-3, new int[]{4,-4,3});
    rules[4] = new Rule(-4, new int[]{-2});
    rules[5] = new Rule(-4, new int[]{-4,6,-2});
    rules[6] = new Rule(-2, new int[]{7});
    rules[7] = new Rule(-2, new int[]{8});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> tuple, ASSIGN, tuple
{left = ValueStack[ValueStack.Depth-3].tupleVal; right = ValueStack[ValueStack.Depth-1].tupleVal;}
        break;
      case 3: // tuple -> LPAREN, vars, RPAREN
{CurrentSemanticValue.tupleVal = ValueStack[ValueStack.Depth-2].tupleVal;}
        break;
      case 4: // vars -> var
{CurrentSemanticValue.tupleVal = new List<Symbol>(){ValueStack[ValueStack.Depth-1].sVal};}
        break;
      case 5: // vars -> vars, COLUMN, var
{ValueStack[ValueStack.Depth-3].tupleVal.Add(ValueStack[ValueStack.Depth-1].sVal); CurrentSemanticValue.tupleVal = ValueStack[ValueStack.Depth-3].tupleVal;}
        break;
      case 6: // var -> Local
{CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;}
        break;
      case 7: // var -> NonLocal
{CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
